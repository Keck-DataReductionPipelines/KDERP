;
; Copyright (c) 2013, California Institute of Technology. All rights
;	reserved.
;+
; NAME:
;	KCWI_STAGE3GEOM
;
; PURPOSE:
;	This procedure generates the geometric correction, which includes 
;	solving for wavelength and spatial geometries.
;
; CATEGORY:
;	Data reduction for the Keck Cosmic Web Imager (KCWI).
;
; CALLING SEQUENCE:
;	KCWI_STAGE3GEOM, Procfname, Pparfname
;
; OPTIONAL INPUTS:
;	Procfname - input proc filename generated by KCWI_PREP
;			defaults to './redux/kcwi.proc'
;	Pparfname - input ppar filename generated by KCWI_STAGE2_PREP
;			defaults to './redux/kcwi.ppar'
;
; KEYWORDS:
;	VERBOSE	- set to verbosity level to override value in ppar file
;	DISPLAY - set to display level to override value in ppar file
;
; OUTPUTS:
;	None
;
; SIDE EFFECTS:
;	Outputs processed files in output directory specified by the
;	KCWI_PPAR struct read in from Pparfname.
;
; PROCEDURE:
;	Reads Pparfname to derive input/output directories and reads the
;	corresponding '*.proc' file in output directory to derive the list
;	of input files and their associated geometric calibration files.
;
; EXAMPLE:
;	Perform stage3geom reductions on the images in 'night1/redux' directory:
;
;	KCWI_STAGE3GEOM,'night1/redux/kcwi.ppar'
;
; MODIFICATION HISTORY:
;	Written by:	Don Neill (neill@caltech.edu)
;	2017-NOV-13	Initial version
;-
pro kcwi_stage3geom,procfname,ppfname,help=help,verbose=verbose, display=display
	;
	; setup
	pre = 'KCWI_STAGE3GEOM'
	startime=systime(1)
	q = ''	; for queries
	;
	; help request
	if keyword_set(help) then begin
		print,pre+': Info - Usage: '+pre+', Proc_filespec, Ppar_filespec'
		print,pre+': Info - default filespecs usually work (i.e., leave them off)'
		return
	endif
	;
	; get ppar struct
	ppar = kcwi_read_ppar(ppfname)
	;
	; verify ppar
	if kcwi_verify_ppar(ppar,/init) ne 0 then begin
		print,pre+': Error - pipeline parameter file not initialized: ',ppfname
		return
	endif
	;
	; directories
	if kcwi_verify_dirs(ppar,rawdir,reddir,cdir,ddir) ne 0 then begin
		kcwi_print_info,ppar,pre,'Directory error, returning',/error
		return
	endif
	;
	; check keyword overrides
	if n_elements(verbose) eq 1 then $
		ppar.verbose = verbose
	if n_elements(display) eq 1 then $
		ppar.display = display
	;
	; log file
	lgfil = reddir + 'kcwi_stage3geom.log'
	filestamp,lgfil,/arch
	openw,ll,lgfil,/get_lun
	ppar.loglun = ll
	printf,ll,'Log file for run of '+pre+' on '+systime(0)
	printf,ll,'DRP Ver: '+kcwi_drp_version()
	printf,ll,'Raw dir: '+rawdir
	printf,ll,'Reduced dir: '+reddir
	printf,ll,'Calib dir: '+cdir
	printf,ll,'Data dir: '+ddir
	printf,ll,'Filespec: '+ppar.filespec
	printf,ll,'Ppar file: '+ppfname
	if ppar.clobber then $
		printf,ll,'Clobbering existing images'
	printf,ll,'Verbosity level   : ',ppar.verbose
	printf,ll,'Plot display level: ',ppar.display
	;
	; read proc file
	kpars = kcwi_read_proc(ppar,procfname,imgnum,count=nproc)
	;
	; gather configuration data on each observation in reddir
	kcwi_print_info,ppar,pre,'Number of input images',nproc
	;
	; loop over images
	for i=0,nproc-1 do begin
		;
		; image to process
		;
		; check for dark subtracted image first
		obfil = kcwi_get_imname(kpars[i],imgnum[i],'_intd',/reduced)
		;
		; if not just get stage1 output image
		if not file_test(obfil) then $
			obfil = kcwi_get_imname(kpars[i],imgnum[i],'_int',/reduced)
		;
		; check if input file exists
		if file_test(obfil) then begin
			;
			; read configuration
			kcfg = kcwi_read_cfg(obfil)
			;
			; direct or dispersed?
			if strpos(kcfg.obstype,'direct') ge 0 then $
				do_direct = (1 eq 1) $
			else	do_direct = (1 eq 0)
			;
			; get image type
			kcfg.imgtype = strtrim(kcfg.imgtype,2)
			;
			; print image summary
			kcwi_print_cfgs,kcfg,imsum,/silent
			if strlen(imsum) gt 0 then begin
				for k=0,1 do junk = gettok(imsum,' ')
				imsum = string(i+1,'/',nproc,format='(i3,a1,i3)')+' '+imsum
			endif
			print,""
			print,imsum
			printf,ll,""
			printf,ll,imsum
			flush,ll
			;
			; record input file
			kcwi_print_info,ppar,pre,'input 2-D image',obfil,format='(a,a)'
			;
			; do we have the geom files?
			if (strtrim(kpars[i].geomcbar,2) ne '' and $
			    strtrim(kpars[i].geomarc,2) ne '') then begin
				;
				; do we have specified cbar and arc files (these take precedence)
				if strtrim(kpars[i].geomcbar,2) ne '' and $
				   strtrim(kpars[i].geomarc,2) ne '' then begin
					;
					; get filenames
					cbf = kpars[i].geomcbar
					arf = kpars[i].geomarc
					;
					; get corresponding kgeom file
					if do_direct then $
						gfile = repstr(arf,'_int.fits','_dgeom.fits') $
					else	gfile = repstr(cbf,'_int.fits','_geom.fits')
				endif
				;
				; if it exists, we're done
				if file_test(gfile,/read) then begin
					;
					; log it
					kcwi_print_info,ppar,pre,'Using geometry from',gfile,format='(a,a)'
				;
				; if not, derive it
				endif else begin
					;
					; time geometry generation
					gstartime = systime(1)
					;
					; log
					kcwi_print_info,ppar,pre,'Generating geometry solution'
					;
					; read configs
					ccfg = kcwi_read_cfg(cbf)
					acfg = kcwi_read_cfg(arf)
					;
					; direct image geometry
					if do_direct then begin
						;
						; create a new Kdgeom
						kdgeom = {kcwi_dgeom}
						kdgeom = struct_init(kdgeom)
						kdgeom.initialized = 1
						;
						; populate it with goodness
						kcwi_set_dgeom,kdgeom,acfg,kpars[i]
						kdgeom.arcfname = arf
						kdgeom.arcimgnum = acfg.imgnum
						kdgeom.cbarsfname = cbf
						kdgeom.cbarsimgnum = ccfg.imgnum
						;
						; get direct geometry
						kcwi_solve_dgeom,kdgeom,kpars[i]
						;
						; log bad solution
						if kdgeom.status ne 0 then $
							kcwi_print_info,ppar,pre,'bad direct geometry solution',/error
						;
						; write out result
						kcwi_write_geom,kpars[i],kdgeom
					;
					; dispersed image geometry
					endif else begin
						;
						; get arc atlas
						kcwi_get_atlas,acfg,atlas,atname
						;
						; create a new Kgeom
						kgeom = {kcwi_geom}
						kgeom = struct_init(kgeom)
						kgeom.initialized = 1
						;
						; populate it with goodness
						kcwi_set_geom,kgeom,ccfg,kpars[i],atlas=atlas,atname=atname
						kgeom.cbarsfname = cbf
						kgeom.cbarsimgnum = ccfg.imgnum
						kgeom.arcfname = arf
						kgeom.arcimgnum = acfg.imgnum
						;
						; read in cbars image
						cbars = mrdfits(cbf,0,chdr,/fscale,/silent)
						;
						; trace the bars
						kcwi_trace_cbars,cbars,kgeom,kpars[i],status=stat
						;
						; check status, if < 0 don't proceed
						if stat ge 0 then begin
							;
							; log
							kcwi_print_info,ppar,pre,'traced continuum bars in cbars image',cbf,format='(a,a)'
							;
							; read in arcs
							arc = mrdfits(arf,0,ahdr,/fscale,/silent)
							;
							; extract along bars
							kcwi_extract_arcs,arc,kgeom,spec,kpars[i]
							;
							; log
							kcwi_print_info,ppar,pre,'extracted arc spectra from arc image',arf,format='(a,a)'
							;
							; do the solution
							kcwi_solve_geom,spec,kgeom,kpars[i]
							;
							; log bad solution
							if kgeom.status ne 0 then $
								kcwi_print_info,ppar,pre,'bad dispersed geometry solution',/error
						endif else $
							kcwi_print_info,ppar,pre,'unable to trace cont bars',/error
						;
						; write out result
						kcwi_write_geom,kpars[i],kgeom
						;
						; output a wavemap image which gives the 
						; 1. wavelength at each pixel
						; 2. slice position at each pixel
						; 3. slice number at each pixel
						kcwi_reverse_geom,kgeom,kpars[i]
					endelse	; dispersed image geometry
					;
					; time for geometry
					eltime = systime(1) - gstartime
					print,''
					printf,ll,''
					kcwi_print_info,ppar,pre,'geom time in seconds',eltime
				endelse
			;
			; end check for geom files
			endif else begin
				;
				; no problem skipping darks
				if strpos(kcfg.imgtype,'dark') ge 0 then $
					kcwi_print_info,ppar,pre,'darks do not get geometry: '+ $
						obfil,/info $
				else	kcwi_print_info,ppar,pre,'missing calibration file(s) for: '+ $
						obfil,/warning
			endelse
		;
		; end check if input file exists
		endif else $
			kcwi_print_info,ppar,pre,'input file not found: '+obfil,/error
	endfor	; loop over images
	;
	; report
	eltime = systime(1) - startime
	print,''
	printf,ll,''
	kcwi_print_info,ppar,pre,'run time in seconds',eltime
	kcwi_print_info,ppar,pre,'finished on '+systime(0)
	;
	; close log file
	free_lun,ll
	;
	return
end	; kcwi_stage3geom
